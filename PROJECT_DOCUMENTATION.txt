===================================================================================
                    PYTHON SYSTEM MONITOR - PROJECT DOCUMENTATION
===================================================================================

üìã PROJECT OVERVIEW
===================================================================================
This is a real-time system monitoring web application built with Flask (Python web framework).
It monitors CPU and Memory usage of your computer and displays the data through a web interface
with charts, alerts, and a modern dashboard.

üèóÔ∏è PROJECT ARCHITECTURE
===================================================================================

1. BACKEND (Python Flask)
   ‚îú‚îÄ‚îÄ app.py - Main Flask application server
   ‚îú‚îÄ‚îÄ requirements.txt - Python dependencies
   ‚îî‚îÄ‚îÄ Dockerfile - Container configuration

2. FRONTEND (HTML/CSS/JavaScript)
   ‚îú‚îÄ‚îÄ templates/
   ‚îÇ   ‚îú‚îÄ‚îÄ index.html - Main dashboard page
   ‚îÇ   ‚îî‚îÄ‚îÄ login.html - Login page
   ‚îú‚îÄ‚îÄ static/
   ‚îÇ   ‚îú‚îÄ‚îÄ css/
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ styles.css - Dashboard styling
   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ log.css - Login page styling
   ‚îÇ   ‚îú‚îÄ‚îÄ js/
   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index-script.js - Dashboard functionality
   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ log-script.js - Login functionality
   ‚îÇ   ‚îî‚îÄ‚îÄ images/ - Static images and screenshots

üìÅ DETAILED FILE BREAKDOWN
===================================================================================

üêç BACKEND FILES:
===================================================================================

üìÑ app.py (Main Flask Application)
-------------------------------------------
PURPOSE: The heart of the application - handles all server-side logic

KEY COMPONENTS:
1. IMPORTS:
   - psutil: Library to get system information (CPU, Memory)
   - Flask modules: Web framework components
   - Flask-Session: Manages user sessions

2. ROUTES (URL endpoints):
   
   üîê /login [GET, POST]
   - Handles user authentication
   - Username: "admin", Password: "admin"
   - Creates a session when login is successful
   
   üè† / (homepage)
   - Main dashboard page
   - Redirects to login if not authenticated
   - Gets current CPU and Memory usage
   
   üìä /data [GET]
   - API endpoint that returns JSON data
   - Provides real-time CPU and Memory percentages
   - Returns "Warning" if usage > 80%, "OK" otherwise
   
   üö™ /logout
   - Destroys user session
   - Redirects to login page

3. SYSTEM MONITORING:
   - Uses psutil.cpu_percent() for CPU usage
   - Uses psutil.virtual_memory().percent for Memory usage
   - Runs on host='0.0.0.0' (accessible from any IP)

üìÑ requirements.txt (Dependencies)
-------------------------------------------
- psutil==5.9.5: System information library
- Flask==2.2.2: Web framework (updated to 2.3.3 for compatibility)
- Flask-Session==0.5.0: Session management

üìÑ Dockerfile (Container Configuration)
-------------------------------------------
- Uses Python 3.9 base image
- Installs dependencies
- Exposes port 5000
- Runs the Flask application

üåê FRONTEND FILES:
===================================================================================

üìÑ templates/login.html
-------------------------------------------
PURPOSE: User authentication interface

FEATURES:
- Clean, modern login form
- Username and password fields
- Links to log.css for styling
- Uses log-script.js for interactions
- Form submits to /login route

üìÑ templates/index.html
-------------------------------------------
PURPOSE: Main monitoring dashboard

FEATURES:
- Displays CPU usage percentage and chart
- Displays Memory usage percentage and chart
- Shows system alerts
- Dark mode toggle button
- Logout button
- Countdown timer for next update
- Uses Chart.js library for visualizations

üìÑ static/js/index-script.js
-------------------------------------------
PURPOSE: Dashboard interactivity and real-time updates

KEY FUNCTIONS:

1. createChart(chartElement, data):
   - Creates doughnut charts using Chart.js
   - Color coding: Green (<40%), Orange (40-80%), Red (>80%)

2. updateData():
   - Makes AJAX call to /data endpoint every 5 seconds
   - Updates CPU and Memory percentages
   - Updates alert messages
   - Refreshes charts with new data

3. Dark Mode Toggle:
   - Switches between light and dark themes
   - Saves preference in localStorage
   - Persists across browser sessions

4. Countdown Timer:
   - Shows when next update will occur
   - Updates every second

üìÑ static/js/log-script.js
-------------------------------------------
PURPOSE: Login page functionality (form validation, etc.)

üìÑ static/css/styles.css
-------------------------------------------
PURPOSE: Dashboard styling
- Modern, responsive design
- Dark mode support
- Chart containers and layouts
- Button styles and animations

üìÑ static/css/log.css
-------------------------------------------
PURPOSE: Login page styling
- Clean, centered login form
- Modern input field design
- Responsive layout

üîÑ HOW THE APPLICATION WORKS (Data Flow)
===================================================================================

1. USER ACCESS:
   Browser ‚Üí http://localhost:5000 ‚Üí Flask app.py

2. AUTHENTICATION:
   login.html ‚Üí Form submission ‚Üí /login route ‚Üí Session creation ‚Üí Redirect to dashboard

3. DASHBOARD LOADING:
   / route ‚Üí Check session ‚Üí Get system data ‚Üí Render index.html

4. REAL-TIME UPDATES:
   JavaScript Timer (5 seconds) ‚Üí AJAX call to /data ‚Üí Update DOM ‚Üí Refresh charts

5. SYSTEM MONITORING:
   psutil library ‚Üí Gets CPU/Memory data ‚Üí JSON response ‚Üí Frontend display

üìä DATA FLOW DIAGRAM:
===================================================================================

[Browser] ‚Üê‚Üí [Flask Server (app.py)] ‚Üê‚Üí [System (psutil)]
    ‚Üë                    ‚Üì
[HTML/CSS/JS]     [Templates Engine]
    ‚Üë                    ‚Üì
[Chart.js]        [JSON API (/data)]

üöÄ HOW TO RUN THE PROJECT
===================================================================================

METHOD 1: Direct Python Execution
-----------------------------------
1. Install Python 3.x
2. Install dependencies: pip install -r requirements.txt
3. Run: python app.py
4. Access: http://localhost:5000
5. Login: admin/admin

METHOD 2: Docker Container
-----------------------------------
1. Build image: docker build -t system-monitor .
2. Run container: docker run -p 5000:5000 system-monitor
3. Access: http://localhost:5000
4. Login: admin/admin

üîß TECHNICAL SPECIFICATIONS
===================================================================================

BACKEND TECHNOLOGIES:
- Python 3.x
- Flask 2.3.3 (Web Framework)
- psutil 5.9.5 (System Monitoring)
- Flask-Session 0.5.0 (Session Management)

FRONTEND TECHNOLOGIES:
- HTML5
- CSS3 (with custom styling)
- JavaScript (ES6+)
- jQuery 3.6.0 (DOM manipulation)
- Chart.js (Data visualization)

FEATURES:
- Real-time monitoring (5-second intervals)
- Authentication system
- Responsive design
- Dark mode support
- Warning alerts (>80% usage)
- Doughnut charts for visualization
- Session management
- Docker support

üéØ KEY FEATURES EXPLAINED
===================================================================================

1. REAL-TIME MONITORING:
   - Updates every 5 seconds automatically
   - No page refresh needed
   - Uses AJAX for seamless updates

2. VISUAL CHARTS:
   - Doughnut charts using Chart.js
   - Color-coded (Green/Orange/Red)
   - Responsive and animated

3. ALERT SYSTEM:
   - Warns when CPU or Memory > 80%
   - Changes alert message and color
   - Real-time status updates

4. AUTHENTICATION:
   - Simple login system
   - Session-based security
   - Logout functionality

5. DARK MODE:
   - Toggle between themes
   - Persistent preference storage
   - Modern UI design

6. DOCKER SUPPORT:
   - Containerized deployment
   - Easy scaling and deployment
   - Cross-platform compatibility

üêõ TROUBLESHOOTING
===================================================================================

Common Issues:
1. ImportError with Flask/Werkzeug: Update to compatible versions
2. Port 5000 busy: Change port in app.py or kill existing process
3. Permission denied: Run with appropriate privileges
4. Module not found: Ensure all dependencies are installed

Dependencies Compatibility:
- Flask 2.3.3 + Werkzeug 2.3.7 (working combination)
- Python 3.7+ required
- Modern browser with JavaScript enabled

üîÆ POTENTIAL IMPROVEMENTS & RECENT UPDATES
===================================================================================

RECENT ENHANCEMENTS (2025 Update):
‚úÖ Modern UI/UX Design:
- Enhanced dashboard with horizontal CPU/Memory layout
- Added smooth animations and transitions
- Implemented glassmorphism design effects
- Improved color schemes and gradients
- Better responsive design for all screen sizes

‚úÖ Enhanced Login Experience:
- Fixed input field text overlap issues
- Smooth placeholder animations
- Modern form styling with backdrop filters
- Improved user interaction feedback

‚úÖ Dashboard Improvements:
- Horizontal layout for CPU and Memory sections
- Enhanced chart animations and styling
- Better data visualization with improved charts
- Smooth loading animations
- Modern card-based layout design

‚úÖ CSS/Animation Enhancements:
- Added keyframe animations for better user experience
- Implemented hover effects and transitions
- Modern gradient backgrounds
- Improved typography and spacing
- Enhanced dark mode styling

FUTURE IMPROVEMENTS:
- Add historical data storage (database)
- Implement multiple user accounts
- Add more system metrics (disk, network)
- Email/SMS alerts
- Data export functionality
- Mobile app version
- Advanced charting options
- Real-time notifications
- System health scoring
- Performance analytics dashboard

===================================================================================
                                END OF DOCUMENTATION
===================================================================================

üìù NOTES FOR BEGINNERS:
- This project demonstrates full-stack web development
- Shows real-time data updates without page refresh
- Combines backend (Python) with frontend (HTML/CSS/JS)
- Great example of REST API design (/data endpoint)
- Demonstrates session management and authentication
- Shows how to integrate external libraries (Chart.js, psutil)
